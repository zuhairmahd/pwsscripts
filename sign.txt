NAME
    Invoke-TrustedSigning

SYNOPSIS
    Sign files with the Trusted Signing service.
SYNTAX
    Invoke-TrustedSigning -Endpoint -CodeSigningAccountName -CertificateProfileName [-Files] [-FilesFolder]
    [-FilesFolderFilter] [-FilesFolderRecurse] [-FilesFolderDepth] [-FilesCatalog] -FileDigest [-TimestampRfc3161]
    [-TimestampDigest] [-AppendSignature] [-Description] [-DescriptionUrl] [-GenerateDigestPath] [-GenerateDigestXml]
    [-IngestDigestPath] [-SignDigest] [-GeneratePageHashes] [-SuppressPageHashes] [-GeneratePkcs7] [-Pkcs7Options]
    [-Pkcs7Oid] [-EnhancedKeyUsage] [-ExcludeEnvironmentCredential] [-ExcludeWorkloadIdentityCredential]
    [-ExcludeManagedIdentityCredential] [-ExcludeSharedTokenCacheCredential] [-ExcludeVisualStudioCredential]
    [-ExcludeVisualStudioCodeCredential] [-ExcludeAzureCliCredential] [-ExcludeAzurePowerShellCredential]
    [-ExcludeAzureDeveloperCliCredential] [-ExcludeInteractiveBrowserCredential] [-Timeout] [-BatchSize]
    [-ClickOnceApplicationName] [-ClickOncePublisherName] [<CommonParameters>]

DESCRIPTION
    Sign files with the Trusted Signing service. Before you can perform this operation, you need to create an Trusted Signing account and install the .NET 6 runtime. Authentication is handled by "DefaultAzureCredential".

PARAMETERS
    -Endpoint <System.String>
        The Code Signing Account endpoint. The URI value must have a URI that aligns to the region your Code Signing Account and Certificate Profile you are specifying were created in during the setup of these resources.
    -CodeSigningAccountName <System.String>
        The Code Signing Account name.
    -CertificateProfileName <System.String>
        The Certificate Profile name.
    -Files [<System.String>]
        A comma separated list of absolute paths to the files being signed.
    -FilesFolder [<System.String>]
        The folder containing files to be signed. Can be combined with the file-catalog input.
    -FilesFolderFilter [<System.String>]
        A comma separated list of file extensions that determines which types of files will be signed in the folder specified by the files-folder input. Any file type not included in this list will not be signed. If this input is not used, all files in the folder will be signed.
    -FilesFolderRecurse [<SwitchParameter>]
        Search the folder specified by the files-folder parameter recursively.
    -FilesFolderDepth [<System.Int>]
        The depth of the recursive search toggled by the files-folder-recursive parameter.
    -FilesCatalog [<System.String>]
        A file containing a list of relative paths to the files being signed. The paths should be relative to the location of the catalog file. Each file path should be on a separate line. Can be combined with the files-folder parameter.
    -FileDigest <System.String>
        The name of the digest algorithm used for hashing the file being signed.
    -TimestampRfc3161 [<System.String>]
        A URL to an RFC3161 compliant timestamping service.
    -TimestampDigest [<System.String>]
        The name of the digest algorithm used for timestamping.
    -AppendSignature [<SwitchParameter>]
        Append the signature. If no primary signature is present, this signature is made the primary signature instead.
    -Description [<System.String>]
        A description of the signed content.
    -DescriptionUrl [<System.String>]
        A Uniform Resource Locator (URL) for the expanded description of the signed content.
    -GenerateDigestPath [<System.String>]
        Generates the digest to be signed and the unsigned PKCS7 files at this path. The output digest and PKCS7 files will be path\FileName.dig and path\FileName.p7u. To output an additional XML file, see "GenerateDigestXml".
    -GenerateDigestXml [<SwitchParameter>]
        Produce an XML file when the "GenerateDigestPath" parameter is used. The output file will be Path\FileName.dig.xml.
    -IngestDigestPath [<System.String>]
        Creates the signature by ingesting the signed digest to the unsigned PKCS7 file at this path. The input signed digest and unsigned PKCS7 files should be path\FileName.dig.signed and path\FileName.p7u.
    -SignDigest [<SwitchParameter>]
        Sign only the digest. The input file should be the digest generated by the "GenerateDigestPath" parameter. The output file will be File.signed.
    -GeneratePageHashes [<SwitchParameter>]
        Generate page hashes for executable files.
    -SuppressPageHashes [<SwitchParameter>]
        Suppress page hashes for executable files. The default is determined by the SIGNTOOL_PAGE_HASHES environment variable and by the wintrust.dll version. This parameter is ignored for non-PE files.
    -GeneratePkcs7 [<SwitchParameter>]
        Produce a Public Key Cryptography Standards (PKCS) #7 file for each specified content file. PKCS #7 files are named path\filename.p7.
    -Pkcs7Options [<System.String>]
        Options for the signed PKCS #7 content. Set value to "Embedded" to embed the signed content in the PKCS #7 file, or to "DetachedSignedData" to produce the signed data portion of a detached PKCS #7 file. If this parameter is not used, the signed content is embedded by default.
    -Pkcs7Oid [<System.String>]
        The object identifier (OID) that identifies the signed PKCS #7 content.
    -EnhancedKeyUsage [<System.String>]
        The enhanced key usage (EKU) that must be present in the signing certificate. The usage value can be specified by OID or string. The default usage is "Code Signing" (1.3.6.1.5.5.7.3.3).
    -ExcludeEnvironmentCredential [<SwitchParameter>]
        Exclude the "EnvironmentCredential" type from being considered when authenticating with "DefaultAzureCredential".
    -ExcludeManagedIdentityCredential [<SwitchParameter>]
        Exclude the "ManagedIdentity and the .NET 6 runtime to be installedCredential" type from being considered when authenticating with "DefaultAzureCredential".
    -ExcludeSharedTokenCacheCredential [<SwitchParameter>]
        Exclude the "SharedTokenCacheCredential" type from being considered when authenticating with "DefaultAzureCredential".
    -ExcludeVisualStudioCredential [<SwitchParameter>]
        Exclude the "VisualStudioCredential" type from being considered when authenticating with "DefaultAzureCredential".
    -ExcludeVisualStudioCodeCredential [<SwitchParameter>]
        Exclude the "VisualStudioCodeCredential" type from being considered when authenticating with "DefaultAzureCredential".
    -ExcludeAzureCliCredential [<SwitchParameter>]
        Exclude the "AzureCliCredential" type from being considered when authenticating with "DefaultAzureCredential".
    -ExcludeAzurePowerShellCredential [<SwitchParameter>]
        Exclude the "AzurePowerShellCredential" type from being considered when authenticating with "DefaultAzureCredential".
    -ExcludeInteractiveBrowserCredential [<SwitchParameter>]
        Exclude the "InteractiveBrowserCredential" type from being considered when authenticating with "DefaultAzureCredential".
    -Timeout [<System.Int>]
        The number of seconds that the Trusted Signing service will wait for all files to be signed before it exits.
    -BatchSize [<System.Int>]
        The summed length of file paths that can be signed with each signtool call. This parameter should only be relevant if you are signing a large number of files. Increasing the value may result in performance gains at the risk of potentially hitting your system's maximum command length limit. The minimum value is 0 and the maximum value is 30000. A value of 0 means that every file will be signed with an individual call to signtool.
    -ClickOnceApplicationName [<System.String>]
        The application name for any ClickOnce files being signed.
    -ClickOncePublisherName [<System.String>]
        The publisher name for any ClickOnce files being signed.
    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. For more information, see about_CommonParameters (https:/go.microsoft.com/fwlink/?LinkID=113216).

    -------------------------- Example 1 --------------------------
    PS C:\> $params = @{
        Endpoint = "https://wus2.codesigning.azure.net/"
        CodeSigningAccountName = "my-account"
        CertificateProfileName = "my-cert-profile"
        FilesFolder = "bin/Release/net6.0-windows10.0.19041.0/win10-x64/"
        FilesFolderFilter = "exe,dll"
        FileDigest = "SHA256"
        TimestampRfc3161 = "http://timestamp.acs.microsoft.com"
        TimestampDigest = "SHA256"
    }
    Invoke-TrustedSigning @params
    Signs and timestamps .exe/.dll files under the given folder with the Trusted Signing service.
